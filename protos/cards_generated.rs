// automatically generated by the FlatBuffers compiler, do not modify


#![allow(dead_code)]
#![allow(unused_imports)]
extern crate flatbuffers;

pub mod cards {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum CardStatusReplyOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct CardStatusReply<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CardStatusReply<'a> {
    type Inner = CardStatusReply<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> CardStatusReply<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        CardStatusReply {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args CardStatusReplyArgs<'args>) -> flatbuffers::WIPOffset<CardStatusReply<'bldr>> {
      let mut builder = CardStatusReplyBuilder::new(_fbb);
      if let Some(x) = args.date_activated { builder.add_date_activated(x); }
      if let Some(x) = args.status_name { builder.add_status_name(x); }
      if let Some(x) = args.status_code { builder.add_status_code(x); }
      builder.finish()
    }

    pub const VT_STATUS_CODE: flatbuffers::VOffsetT = 4;
    pub const VT_STATUS_NAME: flatbuffers::VOffsetT = 6;
    pub const VT_DATE_ACTIVATED: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn status_code(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CardStatusReply::VT_STATUS_CODE, None)
  }
  #[inline]
  pub fn status_name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CardStatusReply::VT_STATUS_NAME, None)
  }
  #[inline]
  pub fn date_activated(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CardStatusReply::VT_DATE_ACTIVATED, None)
  }
}

pub struct CardStatusReplyArgs<'a> {
    pub status_code: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub status_name: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub date_activated: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for CardStatusReplyArgs<'a> {
    #[inline]
    fn default() -> Self {
        CardStatusReplyArgs {
            status_code: None,
            status_name: None,
            date_activated: None,
        }
    }
}
pub struct CardStatusReplyBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CardStatusReplyBuilder<'a, 'b> {
  #[inline]
  pub fn add_status_code(&mut self, status_code: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CardStatusReply::VT_STATUS_CODE, status_code);
  }
  #[inline]
  pub fn add_status_name(&mut self, status_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CardStatusReply::VT_STATUS_NAME, status_name);
  }
  #[inline]
  pub fn add_date_activated(&mut self, date_activated: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CardStatusReply::VT_DATE_ACTIVATED, date_activated);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CardStatusReplyBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CardStatusReplyBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CardStatusReply<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum CardErrorReplyOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct CardErrorReply<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CardErrorReply<'a> {
    type Inner = CardErrorReply<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> CardErrorReply<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        CardErrorReply {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args CardErrorReplyArgs<'args>) -> flatbuffers::WIPOffset<CardErrorReply<'bldr>> {
      let mut builder = CardErrorReplyBuilder::new(_fbb);
      if let Some(x) = args.error_message { builder.add_error_message(x); }
      if let Some(x) = args.error_code { builder.add_error_code(x); }
      if let Some(x) = args.id { builder.add_id(x); }
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_ERROR_CODE: flatbuffers::VOffsetT = 6;
    pub const VT_ERROR_MESSAGE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CardErrorReply::VT_ID, None)
  }
  #[inline]
  pub fn error_code(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CardErrorReply::VT_ERROR_CODE, None)
  }
  #[inline]
  pub fn error_message(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CardErrorReply::VT_ERROR_MESSAGE, None)
  }
}

pub struct CardErrorReplyArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub error_code: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub error_message: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for CardErrorReplyArgs<'a> {
    #[inline]
    fn default() -> Self {
        CardErrorReplyArgs {
            id: None,
            error_code: None,
            error_message: None,
        }
    }
}
pub struct CardErrorReplyBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CardErrorReplyBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CardErrorReply::VT_ID, id);
  }
  #[inline]
  pub fn add_error_code(&mut self, error_code: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CardErrorReply::VT_ERROR_CODE, error_code);
  }
  #[inline]
  pub fn add_error_message(&mut self, error_message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CardErrorReply::VT_ERROR_MESSAGE, error_message);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CardErrorReplyBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CardErrorReplyBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CardErrorReply<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum CardRatePlanOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct CardRatePlan<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CardRatePlan<'a> {
    type Inner = CardRatePlan<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> CardRatePlan<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        CardRatePlan {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args CardRatePlanArgs<'args>) -> flatbuffers::WIPOffset<CardRatePlan<'bldr>> {
      let mut builder = CardRatePlanBuilder::new(_fbb);
      if let Some(x) = args.plan_name { builder.add_plan_name(x); }
      if let Some(x) = args.plan_code { builder.add_plan_code(x); }
      builder.finish()
    }

    pub const VT_PLAN_CODE: flatbuffers::VOffsetT = 4;
    pub const VT_PLAN_NAME: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn plan_code(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CardRatePlan::VT_PLAN_CODE, None)
  }
  #[inline]
  pub fn plan_name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CardRatePlan::VT_PLAN_NAME, None)
  }
}

pub struct CardRatePlanArgs<'a> {
    pub plan_code: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub plan_name: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for CardRatePlanArgs<'a> {
    #[inline]
    fn default() -> Self {
        CardRatePlanArgs {
            plan_code: None,
            plan_name: None,
        }
    }
}
pub struct CardRatePlanBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CardRatePlanBuilder<'a, 'b> {
  #[inline]
  pub fn add_plan_code(&mut self, plan_code: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CardRatePlan::VT_PLAN_CODE, plan_code);
  }
  #[inline]
  pub fn add_plan_name(&mut self, plan_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CardRatePlan::VT_PLAN_NAME, plan_name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CardRatePlanBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CardRatePlanBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CardRatePlan<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum CardPlanReplyOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct CardPlanReply<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CardPlanReply<'a> {
    type Inner = CardPlanReply<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> CardPlanReply<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        CardPlanReply {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args CardPlanReplyArgs<'args>) -> flatbuffers::WIPOffset<CardPlanReply<'bldr>> {
      let mut builder = CardPlanReplyBuilder::new(_fbb);
      if let Some(x) = args.plans { builder.add_plans(x); }
      builder.finish()
    }

    pub const VT_PLANS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn plans(&self) -> Option<flatbuffers::Vector<flatbuffers::ForwardsUOffset<CardRatePlan<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<CardRatePlan<'a>>>>>(CardPlanReply::VT_PLANS, None)
  }
}

pub struct CardPlanReplyArgs<'a> {
    pub plans: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<CardRatePlan<'a >>>>>,
}
impl<'a> Default for CardPlanReplyArgs<'a> {
    #[inline]
    fn default() -> Self {
        CardPlanReplyArgs {
            plans: None,
        }
    }
}
pub struct CardPlanReplyBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CardPlanReplyBuilder<'a, 'b> {
  #[inline]
  pub fn add_plans(&mut self, plans: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<CardRatePlan<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CardPlanReply::VT_PLANS, plans);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CardPlanReplyBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CardPlanReplyBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CardPlanReply<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum CardUsageReplyOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct CardUsageReply<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CardUsageReply<'a> {
    type Inner = CardUsageReply<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> CardUsageReply<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        CardUsageReply {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args CardUsageReplyArgs) -> flatbuffers::WIPOffset<CardUsageReply<'bldr>> {
      let mut builder = CardUsageReplyBuilder::new(_fbb);
      builder.add_voice_used(args.voice_used);
      builder.add_sms_used(args.sms_used);
      builder.add_data_used(args.data_used);
      builder.finish()
    }

    pub const VT_DATA_USED: flatbuffers::VOffsetT = 4;
    pub const VT_SMS_USED: flatbuffers::VOffsetT = 6;
    pub const VT_VOICE_USED: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn data_used(&self) -> u64 {
    self._tab.get::<u64>(CardUsageReply::VT_DATA_USED, Some(0)).unwrap()
  }
  #[inline]
  pub fn sms_used(&self) -> u64 {
    self._tab.get::<u64>(CardUsageReply::VT_SMS_USED, Some(0)).unwrap()
  }
  #[inline]
  pub fn voice_used(&self) -> u64 {
    self._tab.get::<u64>(CardUsageReply::VT_VOICE_USED, Some(0)).unwrap()
  }
}

pub struct CardUsageReplyArgs {
    pub data_used: u64,
    pub sms_used: u64,
    pub voice_used: u64,
}
impl<'a> Default for CardUsageReplyArgs {
    #[inline]
    fn default() -> Self {
        CardUsageReplyArgs {
            data_used: 0,
            sms_used: 0,
            voice_used: 0,
        }
    }
}
pub struct CardUsageReplyBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CardUsageReplyBuilder<'a, 'b> {
  #[inline]
  pub fn add_data_used(&mut self, data_used: u64) {
    self.fbb_.push_slot::<u64>(CardUsageReply::VT_DATA_USED, data_used, 0);
  }
  #[inline]
  pub fn add_sms_used(&mut self, sms_used: u64) {
    self.fbb_.push_slot::<u64>(CardUsageReply::VT_SMS_USED, sms_used, 0);
  }
  #[inline]
  pub fn add_voice_used(&mut self, voice_used: u64) {
    self.fbb_.push_slot::<u64>(CardUsageReply::VT_VOICE_USED, voice_used, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CardUsageReplyBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CardUsageReplyBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CardUsageReply<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_card_error_reply<'a>(buf: &'a [u8]) -> CardErrorReply<'a> {
  flatbuffers::get_root::<CardErrorReply<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_card_error_reply<'a>(buf: &'a [u8]) -> CardErrorReply<'a> {
  flatbuffers::get_size_prefixed_root::<CardErrorReply<'a>>(buf)
}

#[inline]
pub fn finish_card_error_reply_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<CardErrorReply<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_card_error_reply_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<CardErrorReply<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod cards

