use hashbrown::HashMap;
use lazy_static::lazy_static;

use crate::{CardInfo, CardStatus, Result};

lazy_static! {
    static ref ERROR_HASHMAP: HashMap<&'static str, (&'static str, &'static str)> = {
        let m: HashMap<&'static str, (&'static str, &'static str)> = [
            ("1", ("40000001", "其它错误，请联系管理员。")),
            ("2", ("40000002", "系统无记录，请检查输入参数是否正确。")),
            ("3", ("40000003", "订购关系鉴权不通过。")),
            ("4", ("40000004", "应用信息错误，请检查应用状态。")),
            ("5", ("40000005", "集团状态不正常，请检查集团状态。")),
            ("6", ("40000006", "IP地址鉴权不通过。")),
            ("7", ("40000007", "TOKEN鉴权不通过。")),
            ("8", ("40000008", "白名单鉴权不通过，请联系管理员添加白名单。")),
            ("9", ("40000009", "群组ID不属于所查询的EC客户。")),
            ("10", ("40000010", "请求参数不正确，请参考能力调用文档。")),
            ("11", ("40000011", "号码没有归属省份。")),
            ("12", ("40000012", "MSISDN号不是所查询的集团下的用户。")),
            ("13", ("40000013", "请求参数命名不规范，请参考能力调用文档。")),
            ("14", ("40000014", "日期参数格式不正确，请参考能力调用文档。")),
            ("15", ("40000015", "请求参数的内容非法，请参考能力调用文档。")),
            ("17", ("40000017", "ECID数量超出限制范围，请核查。")),
            ("18", ("40000018", "卡号数量超出限制范围，请核查。")),
            ("19", ("40000019", "查询时间超出限制范围，请参考能力调用文档。")),
            ("20", ("40000020", "暂时查询不到数据，请早上9点后再试。")),
            ("21", ("40000021", "查询号码全部非法，请确认号码正确性。")),
            ("22", ("40000022", "MSISDN号不是所查询的省公司下的用户。")),
            ("23", ("40000023", "省公司ID不正确。")),
            ("24", ("40000024", "IMSI号不是所查询的集团下的用户。")),
            ("25", ("40000025", "ICCID号不是所查询的集团下的用户。")),
            ("26", ("40000026", "type参数值错误，请参考能力调用文档。")),
            ("27", ("40000027", "集团未订购流量池。")),
            ("28", ("40000028", "短信长度超过140字节，请检查短信长度。")),
            ("29", ("40000029", "动作码错误，请核查。")),
            ("32", ("40000032", "ecid不是所查询的省下的集团客户。")),
            ("34", ("40000034", "IMSI号不是所查询的省公司下的用户。")),
            ("35", ("40000035", "ICCID号不是所查询的省公司下的用户。")),
            ("36", ("40000036", "CUSTID不是所查询的省公司下的用户。")),
            ("37", ("40000037", "批量操作失败。")),
            ("38", ("40000038", "码号信息错误，请检查MSISDN、ICCID、IMSI是否正确。")),
            ("39", ("40000039", "IMSI号不是所查询的客户下的用户。")),
            ("40", ("40000040", "ICCID号不是所查询的客户下的用户。")),
            ("41", ("40000041", "MSISDN号不是所查询的客户下的用户。")),
            ("42", ("40000042", "数据正在生成中。")),
            ("43", ("40000043", "文件不存在。")),
            ("71", ("40000071", "系统忙，请稍后再试。")),
            ("72", ("40000072", "已超出单位时间客户调用限制，请稍后再试。")),
            ("73", ("40000073", "系统忙，请稍后再试。")),
            ("74", ("40000074", "系统忙，请稍后再试。")),
            ("75", ("40000075", "已超出单位时间内客户总调用量的限制，请稍后再试。")),
            ("81", ("40000081", "该卡号所属区域暂不支持该功能。")),
            ("99", ("40000099", "其它错误，请联系管理员。")),
            ("100", ("40000100", "通信失败，请联系管理员。")),
            ("101", ("40000101", "通信失败，请联系管理员。")),
            ("102", ("40000102", "通信失败，请联系管理员。")),
            ("103", ("40000103", "定位失败，请联系管理员。")),
            ("104", ("40000104", "用户关机或无法接通。")),
            ("105", ("40000105", "短信重置失败，请联系管理员。")),
            ("200", ("40000200", "通信失败，请稍后再试。")),
            ("201", ("40000201", "通信失败，请联系管理员。")),
            ("202", ("40000202", "通信失败，请联系管理员。")),
            ("203", ("40000203", "该号码已经提交了业务办理申请，在前一业务办理未完成前不能提交新的业务办理申请。")),
            ("204", ("40000204", "其它错误，请联系管理员。")),
            ("205", ("40000205", "该用户未订购达量限速产品。")),
            ("300", ("40000300", "其它错误，请联系管理员。")),
            ("301", ("40000301", "管理短信白名单失败。")),
            ("302", ("40000302", "只有中国移动的号码才能够加入白名单。")),
            ("303", ("40000303", "添加白名单个数超过最大个数限制。")),
            ("304", ("40000304", "删除白名单个数超过最大个数限制。")),
            ("305", ("40000305", "不能删除未加入白名单的卡号。")),
            ("306", ("40000306", "接入码不存在。")),
            ("307", ("40000307", "不能新增已加入白名单的卡号。")),
            ("308", ("40000308", "卡号不属于该客户，不能操作白名单。")),
            ("401", ("40000401", "批量信息同步失败。")),
            ("402", ("40000402", "卡号信息已存在，不需同步。")),
            ("01016", ("40001016", "请求参数不正确，请参考能力调用文档。")),
        ]
        .iter()
        .cloned()
        .collect();
        m
    };
    static ref STATUS_NAME_HASHMAP: HashMap<&'static str, &'static str> = {
        let m: HashMap<&'static str, &'static str> = [
            ("1", "正常"),
            ("2", "待激活"),
            ("3", "停机"),
            ("4", "销户"),
            ("8", "全停"),
            ("9", "全停"),
        ]
        .iter()
        .cloned()
        .collect();
        m
    };
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CardReply {
    pub status: String,
    pub message: String,
    pub result: Vec<CardReplyResult>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CardReplyResult {
    pub status: String,
    pub message: String,
    pub iccid: String,
    pub msisdn: String,
    pub imsi: String,
    pub prod_id: String,
    pub prod_inst_id: String,
    pub prod_name: String,
    pub gprs_total: String,
    pub gprs_used: String,
    pub gprs_left: String,
    #[serde(rename = "GPRSSTATUS")]
    pub gprs_status: String,
    #[serde(rename = "IP")]
    pub ip: String,
    #[serde(rename = "APN")]
    pub apn: String,
    #[serde(rename = "RAT")]
    pub rat: String,
    pub open_time: String,
    pub apnname: String,
    pub total_gprs: String,
}

impl CardReply {
    pub fn to_card_status(&self) -> Result<CardStatus> {
        if self.status.as_str() != "0" {
            return Err(self.message.to_string())?;
        };
        let status_code: &str = &self.result[0].status;
        let status_name = match STATUS_NAME_HASHMAP.get(status_code) {
            Some(name) => name,
            None => "未知状态",
        };
        Ok(CardStatus {
            status_code: status_code.to_owned(),
            status_name: status_name.to_owned(),
            date_activated: "未知".to_string(),
        })
    }
}
